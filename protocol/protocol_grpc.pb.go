// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protocol/protocol.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnimaClient is the client API for Anima service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimaClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	CreateAnima(ctx context.Context, in *AnimaOwnerCreationRequest, opts ...grpc.CallOption) (*Empty, error)
	Issue(ctx context.Context, in *IssueDocumentRequest, opts ...grpc.CallOption) (*IssueDocumentResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	RegisterVerifier(ctx context.Context, in *RegisterVerifierRequest, opts ...grpc.CallOption) (*RegisterVerifierResponse, error)
	RequestAction(ctx context.Context, in *RequestActionRequest, opts ...grpc.CallOption) (*RequestActionResponse, error)
	GrantTrustee(ctx context.Context, in *GrantTrusteeRequest, opts ...grpc.CallOption) (*Empty, error)
	RevokeTrustee(ctx context.Context, in *RevokeTrusteeRequest, opts ...grpc.CallOption) (*Empty, error)
	ListTrustees(ctx context.Context, in *ListTrusteesRequest, opts ...grpc.CallOption) (*ListTrusteesResponse, error)
	DeleteAnima(ctx context.Context, in *DeleteAnimaRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteSingleDocument(ctx context.Context, in *DeleteSingleDocumentRequest, opts ...grpc.CallOption) (*Empty, error)
}

type animaClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimaClient(cc grpc.ClientConnInterface) AnimaClient {
	return &animaClient{cc}
}

func (c *animaClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/anima.Anima/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) CreateAnima(ctx context.Context, in *AnimaOwnerCreationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/anima.Anima/CreateAnima", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) Issue(ctx context.Context, in *IssueDocumentRequest, opts ...grpc.CallOption) (*IssueDocumentResponse, error) {
	out := new(IssueDocumentResponse)
	err := c.cc.Invoke(ctx, "/anima.Anima/Issue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/anima.Anima/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) RegisterVerifier(ctx context.Context, in *RegisterVerifierRequest, opts ...grpc.CallOption) (*RegisterVerifierResponse, error) {
	out := new(RegisterVerifierResponse)
	err := c.cc.Invoke(ctx, "/anima.Anima/RegisterVerifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) RequestAction(ctx context.Context, in *RequestActionRequest, opts ...grpc.CallOption) (*RequestActionResponse, error) {
	out := new(RequestActionResponse)
	err := c.cc.Invoke(ctx, "/anima.Anima/RequestAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) GrantTrustee(ctx context.Context, in *GrantTrusteeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/anima.Anima/GrantTrustee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) RevokeTrustee(ctx context.Context, in *RevokeTrusteeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/anima.Anima/RevokeTrustee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) ListTrustees(ctx context.Context, in *ListTrusteesRequest, opts ...grpc.CallOption) (*ListTrusteesResponse, error) {
	out := new(ListTrusteesResponse)
	err := c.cc.Invoke(ctx, "/anima.Anima/ListTrustees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) DeleteAnima(ctx context.Context, in *DeleteAnimaRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/anima.Anima/DeleteAnima", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animaClient) DeleteSingleDocument(ctx context.Context, in *DeleteSingleDocumentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/anima.Anima/DeleteSingleDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimaServer is the server API for Anima service.
// All implementations must embed UnimplementedAnimaServer
// for forward compatibility
type AnimaServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	CreateAnima(context.Context, *AnimaOwnerCreationRequest) (*Empty, error)
	Issue(context.Context, *IssueDocumentRequest) (*IssueDocumentResponse, error)
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	RegisterVerifier(context.Context, *RegisterVerifierRequest) (*RegisterVerifierResponse, error)
	RequestAction(context.Context, *RequestActionRequest) (*RequestActionResponse, error)
	GrantTrustee(context.Context, *GrantTrusteeRequest) (*Empty, error)
	RevokeTrustee(context.Context, *RevokeTrusteeRequest) (*Empty, error)
	ListTrustees(context.Context, *ListTrusteesRequest) (*ListTrusteesResponse, error)
	DeleteAnima(context.Context, *DeleteAnimaRequest) (*Empty, error)
	DeleteSingleDocument(context.Context, *DeleteSingleDocumentRequest) (*Empty, error)
	mustEmbedUnimplementedAnimaServer()
}

// UnimplementedAnimaServer must be embedded to have forward compatible implementations.
type UnimplementedAnimaServer struct {
}

func (UnimplementedAnimaServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAnimaServer) CreateAnima(context.Context, *AnimaOwnerCreationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnima not implemented")
}
func (UnimplementedAnimaServer) Issue(context.Context, *IssueDocumentRequest) (*IssueDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedAnimaServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedAnimaServer) RegisterVerifier(context.Context, *RegisterVerifierRequest) (*RegisterVerifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVerifier not implemented")
}
func (UnimplementedAnimaServer) RequestAction(context.Context, *RequestActionRequest) (*RequestActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAction not implemented")
}
func (UnimplementedAnimaServer) GrantTrustee(context.Context, *GrantTrusteeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantTrustee not implemented")
}
func (UnimplementedAnimaServer) RevokeTrustee(context.Context, *RevokeTrusteeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeTrustee not implemented")
}
func (UnimplementedAnimaServer) ListTrustees(context.Context, *ListTrusteesRequest) (*ListTrusteesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrustees not implemented")
}
func (UnimplementedAnimaServer) DeleteAnima(context.Context, *DeleteAnimaRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnima not implemented")
}
func (UnimplementedAnimaServer) DeleteSingleDocument(context.Context, *DeleteSingleDocumentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSingleDocument not implemented")
}
func (UnimplementedAnimaServer) mustEmbedUnimplementedAnimaServer() {}

// UnsafeAnimaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimaServer will
// result in compilation errors.
type UnsafeAnimaServer interface {
	mustEmbedUnimplementedAnimaServer()
}

func RegisterAnimaServer(s grpc.ServiceRegistrar, srv AnimaServer) {
	s.RegisterService(&Anima_ServiceDesc, srv)
}

func _Anima_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_CreateAnima_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimaOwnerCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).CreateAnima(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/CreateAnima",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).CreateAnima(ctx, req.(*AnimaOwnerCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/Issue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).Issue(ctx, req.(*IssueDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_RegisterVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterVerifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).RegisterVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/RegisterVerifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).RegisterVerifier(ctx, req.(*RegisterVerifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_RequestAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).RequestAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/RequestAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).RequestAction(ctx, req.(*RequestActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_GrantTrustee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantTrusteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).GrantTrustee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/GrantTrustee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).GrantTrustee(ctx, req.(*GrantTrusteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_RevokeTrustee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTrusteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).RevokeTrustee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/RevokeTrustee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).RevokeTrustee(ctx, req.(*RevokeTrusteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_ListTrustees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrusteesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).ListTrustees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/ListTrustees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).ListTrustees(ctx, req.(*ListTrusteesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_DeleteAnima_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnimaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).DeleteAnima(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/DeleteAnima",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).DeleteAnima(ctx, req.(*DeleteAnimaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anima_DeleteSingleDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSingleDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimaServer).DeleteSingleDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anima.Anima/DeleteSingleDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimaServer).DeleteSingleDocument(ctx, req.(*DeleteSingleDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Anima_ServiceDesc is the grpc.ServiceDesc for Anima service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Anima_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anima.Anima",
	HandlerType: (*AnimaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Anima_Status_Handler,
		},
		{
			MethodName: "CreateAnima",
			Handler:    _Anima_CreateAnima_Handler,
		},
		{
			MethodName: "Issue",
			Handler:    _Anima_Issue_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Anima_Verify_Handler,
		},
		{
			MethodName: "RegisterVerifier",
			Handler:    _Anima_RegisterVerifier_Handler,
		},
		{
			MethodName: "RequestAction",
			Handler:    _Anima_RequestAction_Handler,
		},
		{
			MethodName: "GrantTrustee",
			Handler:    _Anima_GrantTrustee_Handler,
		},
		{
			MethodName: "RevokeTrustee",
			Handler:    _Anima_RevokeTrustee_Handler,
		},
		{
			MethodName: "ListTrustees",
			Handler:    _Anima_ListTrustees_Handler,
		},
		{
			MethodName: "DeleteAnima",
			Handler:    _Anima_DeleteAnima_Handler,
		},
		{
			MethodName: "DeleteSingleDocument",
			Handler:    _Anima_DeleteSingleDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/protocol.proto",
}
